/*
    This spark app listens on port 999 and counts unique words.  It's just a test.

 */
package com.esri.rtsource;

import java.util.Arrays;
import java.util.regex.Pattern;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import scala.Tuple2;

/**
 *
 * @author david
 */
public class TcpSparkStdout {
    
    
    private static final Pattern SPACE = Pattern.compile(" ");

    public static void main(String args[]) {

            String host = "localhost";
            String port = "9999";
            
            SparkConf sparkConf = new SparkConf().setMaster("local[2]").setAppName("JavaNetworkWordCount");
            JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(1));

            // Create a JavaReceiverInputDStream on target ip:port and count the
            // words in input stream of \n delimited text (eg. generated by 'nc')
            // Note that no duplication in storage level only for running locally.
            // Replication necessary in distributed scenario for fault tolerance.
            JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
                    host, Integer.parseInt(port), StorageLevels.MEMORY_AND_DISK_SER);
            JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
                @Override
                public Iterable<String> call(String x) {
                    return Arrays.asList(x.split(" "));
                    //return Lists.newArrayList(SPACE.split(x));
                }
            });
            JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
                    new PairFunction<String, String, Integer>() {
                @Override
                public Tuple2<String, Integer> call(String s) {
                    return new Tuple2<String, Integer>(s, 1);
                }
            }).reduceByKey(new Function2<Integer, Integer, Integer>() {
                        @Override
                        public Integer call(Integer i1, Integer i2) {
                            return i1 + i2;
                        }
                    });

            wordCounts.print();
            ssc.start();
            ssc.awaitTermination();

    }
}
